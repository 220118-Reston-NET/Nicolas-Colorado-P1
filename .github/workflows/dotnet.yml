# This is the YAML for the Shop APP.

#We specify when this action should execute depending on what is happening to the remote repository.

name: Build, Test, and Deploy the API

on:
  # This states that it will trigger if a push happens on the main branch
  push:
    branches: [ main ]
  # This states that it will trigger if a pull happens on the main branch.
  pull_request:
    branches: [ main ]

# Right now our only job is to deploy.
jobs:
  # States all of our configurations
  build:
    runs-on: windows-latest 
    environment:
      name: 'Production' # We state that the the github server/computer will run on the Windows OS
    defaults:
      run: 
        working-directory: ./ # This depends on where the app is located in the remote repository

    # Steps are the sequence of things that this computer/server needs to run to complete a job
    steps:
    # We want this computer to have the right SDK to build, test, and deploy.
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    
    # Will setup a JDK for our computer since the SonarQube uses it to run.
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
    
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    
    # Just gets the necessary packages for the SonarQube tool.
    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: pwsh #NOTED: Changed from Powershell to pwsh
      run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool install dotnet-sonarscanner --version 5.5.3 --tool-path .\.sonar\scanner
    
    # Restores dependencies in our .NET application.
    # Essentially, we will get all the external packages we install (ex. System.Data.SqlClient).
    - name: Restore dependencies
      run: dotnet restore
    
    # Doing our unit tests and making sure that all of it passes before even deploying this app
    - name: Test
      run: dotnet test --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
    
    # This is the configuration step.
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: pwsh
      run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"220118-Reston-NET_Nicolas-Colorado-P1" /o:"220118-reston-net" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.coverage.exclusions=**/ShopApi/wwwroot/lib/**,**/**ShopDL/*.cs,**/ShopApi/Controllers/*.cs /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.vstest.reportsPath="**/TestResults/*.trx"
          dotnet build ./ShopApi -c Release
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}
    
    # We are creating our publish folder for us to use
    - name: Create Publish folder
      run: dotnet publish -c Release -o publish
    
    # Deploying our app to our Azure WebApp
    - name: Deploy
      uses: azure/webapps-deploy@v2
      with:
        app-name: P1ShopApp
        slot-name: 'Production'
        publish-profile: $${{secrets.SHOP_AZURE_WEBAPP_PUBLISH_PROFILE}}
        package: ./publish
