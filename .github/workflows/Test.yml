# YML is another markup language and like most markup langauge, we are just telling the computer what to do
# In this case, we are telling what Github server should do to be able to deploy this application
name: Build, Test, and Deploy API

# We specify when should this action execute depending on what happens in our remote repository
on:
  # This is stating it will run this action every time a push was executing on our main branch
  push:
    branches: [ main ]
  # This is stating it will run this action every time a pull request is done on our main branch
  pull_request:
    branches: [ main ]

# Jobs are just multiple workflows you want to run
# Right now we only have one job which is to deploy but down the line I can add another job to dockerize my app and another job to static analysis the app, so on...
jobs:
  # This is stating what OS our computer should run on
  # In this case, it is using a linux OS named ubuntu (you can put 'windows-latest' for windows OS)
  build:
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./ # Sets the working directory to be my Poke folder in 6-DevOps (yours might differ just look at your online repo and see where your parent folder of your project is)
    
    # Steps are just the sequence of things we want this computer to do to be able to build, test, and deploy our api
    steps:
    
    # We want this computer to have the .NET 6 SDK to even start (because we need that to autogenerate all the things our SDK does for us i.e. bin, obj, publish folders)
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
        
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
        
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    
    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
        
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
        
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        New-Item -Path .\.sonar\scanner -ItemType Directory
        dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
    
    # Restore dependencies .NET application
    # Essentially get all of the external packages we added in this project (ex: System.Data.SqlClient for our ADO.NET for MS SQL)
    - name: Restore dependencies
      run: dotnet restore
      
    # Doing our unit test first to see if our new project passes all of it before deploying
    - name: Test
      run: dotnet test --no-restore
      
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: powershell
      run: |
        .\.sonar\scanner\dotnet-sonarscanner begin /k:"220118-Reston-NET_Nicolas-Colorado-P1" /o:"220118-reston-net" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
        dotnet build --no-restore
        .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
    
    # Creating our publish folder
    - name: Publish
      run: dotnet publish ShopApi/ -c Release -o ./publish
    
    - name: Deploy
      uses: azure/webapps-deploy@v2
      with:
        app-name: P1ShopApp
        slot-name: 'Production'
        publish-profile: $${{secrets.SHOP_AZURE_WEBAPP_PUBLISH_PROFILE}}
        package: ./publish
      
