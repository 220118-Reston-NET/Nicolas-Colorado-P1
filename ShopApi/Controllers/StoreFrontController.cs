using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;
using ShopBL;
using ShopModel;


/*
    This Controller for Customer was autogenerated by utilizing aspnet-codegenerator tool
    (find url in notes)

    -To Start
    --Install tool first = dotnet tool install -g dotnet-aspnet-codegenerator
    ---Add package to api project = dotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design

    **Check notes for directions on creating a Controller.
*/

namespace ShopApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class StoreFrontController : ControllerBase
    {
        //StoreFront Dependency injection
        private IStoreFrontBL _storeBL;

        private IMemoryCache _memoryCache;

        public StoreFrontController(IStoreFrontBL p_storeBL, IMemoryCache p_memoryCache)
        {
            _storeBL = p_storeBL;
            _memoryCache = p_memoryCache;
        }
        //---------------------------------------------------

        // GET: api/StoreFront
        [HttpGet("GetAllStoreFront")]
        public async Task<IActionResult> GetAllStoreFrontAsync()
        {
            try
            {
                List<StoreFront> listofStoreFront= new List<StoreFront>();
                //TryGetValue (check if the cache still exists and if it does "out listofStoreFront" puts that data inside our variable)
                if (!_memoryCache.TryGetValue("StoreList", out listofStoreFront))
                {
                    listofStoreFront = await _storeBL.GetAllStoreFrontAsync();
                    _memoryCache.Set("storeList", listofStoreFront, new TimeSpan(0, 0, 30));
                }

                return Ok(listofStoreFront);
            }
            catch (SqlException)
            {
                return NotFound();
            }
        }

        // GET: api/StoreFront/5
        [HttpGet("{id}", Name = "Get")]
        public string Get(int id)
        {
            return "value";
        }

        // POST: api/StoreFront
        [HttpPost("AddStoreFront")]
        public IActionResult Post([FromBody] StoreFront p_store)
        {
            try
            {
                return Created("Successfully added", _storeBL.AddStoreFront(p_store));
            }
            catch (System.Exception ex)
            {
                return Conflict(ex.Message);
            }
        }

        // // POST: api/StoreFront
        // [HttpPost("PlaceOrder")]
        // public IActionResult Post([FromBody] int p_storeID, int p_productID, int p_Quantity)
        // {
        //     try
        //     {
        //         return Created("Successfully replenished inventory", _storeBL.ReplenishInventory(p_storeID, p_productID, p_Quantity));
        //     }
        //     catch (System.Exception ex)
        //     {
        //         return NotFound;
        //     }
        // }

        // GET: api/Store/5
        [HttpGet("ViewOrderByStoreID/{storeID}")]
        public IActionResult GetOrderbyStoreID(int storeID)
        {
            try
            {
                return Ok(_storeBL.GetOrderbyStoreID(storeID));
            }
            catch (System.Exception)
            {
                return NotFound();
            }
        }

        // GET: api/Store/5
        [HttpGet("ViewInventory/{storeID}")]
        public IActionResult GetProductbyStoreID(int storeID)
        {
            try
            {
                return Ok(_storeBL.GetProductbyStoreID(storeID));
            }
            catch (System.Exception)
            {
                return NotFound();
            }
        }

        // PUT: api/StoreFront
        [HttpPut("ReplenishInventory{storeID}")]
        public IActionResult Put(int p_storeID, [FromBody] Inventory p_inventory)
        {
            try
            {
                Console.WriteLine("Replenishing inventory...");
                return Ok(_storeBL.ReplenishInventory(p_inventory));
            }
            catch (System.Exception ex)
            {
                return Conflict(ex.Message);
            }
        }

        // PUT: api/StoreFront/5
        [HttpPut("{id}")]
        public void Put(int id, [FromBody] string value)
        {
        }

        // DELETE: api/StoreFront/5
        [HttpDelete("{id}")]
        public void Delete(int id)
        {
        }
    }
}
