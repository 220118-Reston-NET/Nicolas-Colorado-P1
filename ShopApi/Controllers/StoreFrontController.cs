using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;
using ShopBL;
using ShopModel;


/*
    This Controller for Customer was autogenerated by utilizing aspnet-codegenerator tool
    (find url in notes)

    -To Start
    --Install tool first = dotnet tool install -g dotnet-aspnet-codegenerator
    ---Add package to api project = dotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design

    **Check notes for directions on creating a Controller.
*/

namespace ShopApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class StoreFrontController : ControllerBase
    {
        //StoreFront Dependency injection
        private IStoreFrontBL _storeBL;

        private IMemoryCache _memoryCache;

        public StoreFrontController(IStoreFrontBL p_storeBL, IMemoryCache p_memoryCache)
        {
            _storeBL = p_storeBL;
            _memoryCache = p_memoryCache;
        }
        //---------------------------------------------------

        // GET: api/StoreFront
        [HttpGet("GetAllStoreFront")]
        public async Task<IActionResult> GetAllStoreFrontAsync()
        {
            try
            {
                List<StoreFront> listofStoreFront= new List<StoreFront>();
                //TryGetValue (check if the cache still exists and if it does "out listofStoreFront" puts that data inside our variable)
                if (!_memoryCache.TryGetValue("StoreList", out listofStoreFront))
                {
                    listofStoreFront = await _storeBL.GetAllStoreFrontAsync();
                    _memoryCache.Set("storeList", listofStoreFront, new TimeSpan(0, 0, 30));
                }
                Log.Information("Successfully returned a list of all stores.");
                return Ok(listofStoreFront);
            }
            catch (SqlException)
            {
                Log.Warning("Could not return a list of stores.");
                return NotFound();
            }
        }


        // POST: api/StoreFront
        [HttpPost("PlaceOrder")]
        public IActionResult PlaceNewOrder([FromBody] Orders p_order)
        {
            try
            {
                Log.Information("Successfully placed an order.");
                return Created("Successfully placed order", _storeBL.PlaceNewOrder(p_order));
            }
            catch (System.Exception ex)
            {
                Log.Warning("Could not place order.");
                return Conflict(ex.Message);
            }
        }

        // GET: api/Store/
        [HttpGet("ViewOrderByStoreID/{storeID}")]
        public IActionResult GetOrderbyStoreID(int storeID)
        {
            try
            {
                Log.Information("Successfully returned list of orders from store.");
                return Ok(_storeBL.GetOrderbyStoreID(storeID));
            }
            catch (System.Exception ex)
            {
                Log.Warning("Could not find order history from a store ID.");
                return StatusCode(422, ex.Message);
            }
        }

        // GET: api/Store/
        [HttpGet("ViewInventory/{storeID}")]
        public IActionResult GetProductbyStoreID(int storeID)
        {
            try
            {
                Log.Information("Successfully returned store inventory.");
                return Ok(_storeBL.GetProductbyStoreID(storeID));
            }
            catch (System.Exception)
            {
                Log.Warning("No inventory was found.");
                return NotFound();
            }
        }

        // PUT: api/StoreFront/
        [HttpPut("ReplenishInventory")]
        public IActionResult ReplenishInventory([FromQuery] Inventory p_inventory, int p_managerID, string p_password)
        {
            if(_storeBL.isAdmin(p_managerID, p_password))
            {
                try
                {
                    Log.Information("Successfully Updated Inventory");
                    return Ok(_storeBL.ReplenishInventory(p_inventory));
                }
                catch (System.Exception ex)
                {
                    Log.Warning("Issue updating inventory");
                    return Conflict(ex.Message);
                }
            }
            else
            {
                return StatusCode(401, "Access denied for user");
            }
        }
    }
}
